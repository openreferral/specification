#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Open Referral documentation build configuration file, created by
# sphinx-quickstart on Wed Nov  2 14:17:45 2016.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import sys
BASE_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), '..')
sys.path.insert(0, os.path.join(BASE_DIR, 'python'))

import openreferral.svg_utils

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = ['myst_parser', 'sphinxcontrib.openapi', 'sphinxcontrib.opendataservices', 'sphinx_rtd_theme',]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']

source_suffix = ['.rst', '.md']

# The encoding of source files.
#
# source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = 'Open Referral Data Specifications'
copyright = '2016, Open Referral'
author = 'Open Referral'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '2.0'
# The full version, including alpha/beta/rc tags.
release = '2.0.1'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#
# today = ''
#
# Else, today_fmt is used as the format for a strftime call.
#
# today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store', '_images/.gitkeep']

# The reST default role (used for this markup: `text`) to use for all
# documents.
#
# default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#
# add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#
# add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#
# show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
# modindex_common_prefix = []

# If true, keep warnings as "system message" paragraphs in the built documents.
# keep_warnings = False

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = False


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
# Commenting this causes readthedocs theme to be used  on readthedocs
# html_theme = 'alabaster'

html_theme = 'sphinx_rtd_theme'


html_context = { 
    'css_files': [
        'https://media.readthedocs.org/css/sphinx_rtd_theme.css',
        'https://media.readthedocs.org/css/readthedocs-doc-embed.css',
        '_static/theme_overrides.css',
    ],
}

html_js_files = ["custom.js"]

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
# html_theme_path = []

# The name for this set of Sphinx documents.
# "<project> v<release> documentation" by default.
#
# html_title = 'Open Referral v1.0'

# A shorter title for the navigation bar.  Default is the same as html_title.
#
# html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#
# html_logo = None

# The name of an image file (relative to this directory) to use as a favicon of
# the docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#
# html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Add any extra paths that contain custom files (such as robots.txt or
# .htaccess) here, relative to this directory. These files are copied
# directly to the root of the documentation.
#
html_extra_path = ['extras']

# If not None, a 'Last updated on:' timestamp is inserted at every page
# bottom, using the given strftime format.
# The empty string is equivalent to '%b %d, %Y'.
#
# html_last_updated_fmt = None

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#
# html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#
# html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#
# html_additional_pages = {}

# If false, no module index is generated.
#
# html_domain_indices = True

# If false, no index is generated.
#
# html_use_index = True

# If true, the index is split into individual pages for each letter.
#
# html_split_index = False

# If true, links to the reST sources are added to the pages.
#
# html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#
# html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#
# html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#
# html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
# html_file_suffix = None

# Language to be used for generating the HTML full-text search index.
# Sphinx supports the following languages:
#   'da', 'de', 'en', 'es', 'fi', 'fr', 'h', 'it', 'ja'
#   'nl', 'no', 'pt', 'ro', 'r', 'sv', 'tr', 'zh'
#
# html_search_language = 'en'

# A dictionary with options for the search language support, empty by default.
# 'ja' uses this config value.
# 'zh' user can custom change `jieba` dictionary path.
#
# html_search_options = {'type': 'default'}

# The name of a javascript file (relative to the configuration directory) that
# implements a search results scorer. If empty, the default will be used.
#
# html_search_scorer = 'scorer.js'

# Output file base name for HTML help builder.
htmlhelp_basename = 'OpenReferraldoc'

# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
     # The paper size ('letterpaper' or 'a4paper').
     #
     # 'papersize': 'letterpaper',

     # The font size ('10pt', '11pt' or '12pt').
     #
     # 'pointsize': '10pt',

     # Additional stuff for the LaTeX preamble.
     #
     # 'preamble': '',

     # Latex figure (float) alignment
     #
     # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'OpenReferral.tex', 'Open Referral Data Specifications',
     'Open Referral', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#
# latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#
# latex_use_parts = False

# If true, show page references after internal links.
#
# latex_show_pagerefs = False

# If true, show URL addresses after external links.
#
# latex_show_urls = False

# Documents to append as an appendix to all manuals.
#
# latex_appendices = []

# It false, will not define \strong, \code, 	itleref, \crossref ... but only
# \sphinxstrong, ..., \sphinxtitleref, ... To help avoid clash with user added
# packages.
#
# latex_keep_old_macro_names = True

# If false, no module index is generated.
#
# latex_domain_indices = True


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'openreferral', 'Open Referral Data Specifications',
     [author], 1)
]

# If true, show URL addresses after external links.
#
# man_show_urls = False


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'OpenReferral', 'Open Referral Data Specifications',
     author, 'OpenReferral', 'Making it easy to share and find information about community resources',
     'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#
# texinfo_appendices = []

# If false, no module index is generated.
#
# texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#
# texinfo_show_urls = 'footnote'

# If true, do not generate a @detailmenu in the "Top" node's menu.
#
# texinfo_no_detailmenu = False




from docutils.parsers.rst import directives
from docutils.parsers.rst import Directive
from docutils.parsers.rst.directives.tables import ListTable
from docutils import nodes
import json
from collections import OrderedDict


class JSONTableSchemaInclude(Directive):
    required_arguments = 1

    def run(self):
        fname = self.arguments[0]
        with open(fname) as fp:
            json_obj = json.load(fp, object_pairs_hook=OrderedDict)

        def wrap_table_text(rows):
            def _wrap(cell):
                para = nodes.paragraph(cell, cell)
                para.source = fname
                return para
            return [[_wrap(cell) for cell in row] for row in rows]

        class MockListTable():
            def __init__(self,widths):
                self.widths = widths

        out = []
        for resource in json_obj['resources']:
            section = nodes.section(ids=[resource['name']], names=[resource['name']])
            out.append(section)
            section += nodes.title(resource['name'], resource['name'])
            description = resource.get('description', '')
            para = nodes.paragraph(description, description)
            para.source = fname
            section += para


            table_data = wrap_table_text([
                ['name', resource['name']],
                ['path', resource['path']],
                ['format', resource['format']],
                ['mediatype', resource['mediatype']],
            ])
            section += ListTable.build_table_from_list(
                self=MockListTable('given'),
                table_data=table_data,
                col_widths=[1, 1],
                header_rows=0,
                stub_columns=0)

            columns = OrderedDict([
                ('Field Name',
                    lambda x: x['name']),
                ('Type (Format)',
                    lambda x: x['type'] + (' ({})'.format(x['format']) if 'format' in x else '')),
                ('Description',
                    lambda x: x['description']),
                ('Required?',
                    lambda x: str(x.get('constraints', {}).get('required', False))),
                ('Unique?',
                    lambda x: str(x.get('constraints', {}).get('unique', False))),
            ])
            table_data = [columns.keys()] + [[f(field) for f in columns.values()] for field in resource['schema']['fields']]
            table_data = wrap_table_text(table_data)
            section += ListTable.build_table_from_list(
                self=MockListTable('given'),
                table_data=table_data,
                col_widths=[0.2,0.2,0.6,0.1,0.1],
                header_rows=1,
                stub_columns=0)
        return out

directives.register_directive('jsontableschemainclude', JSONTableSchemaInclude)


#------------------------------------------- Generate ERDs
import jts_erd
import copy
import csv
with open('../datapackage.json', 'r') as f:
        datapackage = json.load(f)

svg_style_rule = '@font-face{font-family:"Lato";font-style:normal;font-weight:400;src:local("Lato Regular"),local("Lato-Regular"),url(../_static/fonts/Lato-Regular.ttf) format("truetype")}'

# Load core tables
core_tables = []
with open('../core_tables.csv', 'r') as f:
    core_tables_reader = csv.reader(f)
    next(core_tables_reader) # lose header row
    for row in core_tables_reader:
        core_tables.append(row[0])

#---- Full ERD
html_color_header_for_table = {}
for core_table in core_tables:
    html_color_header_for_table[core_table] = '#77DD77'
jts_erd.save_svg(
        datapackage,
        'extras/_images/entity_relationship_diagram.svg',
        display_columns=True,
        display_indexes=True,
        display_tooltips=False,
        fontname="Lato",
        html_color_header='#AEC6CF',
        html_color_header_for_table=html_color_header_for_table,
        html_color_default='#DDDDDD',
        html_color_highlight='#DDDDDD',
        default_namespace_name='human_services_data',
        rankdir='RL',
    )
openreferral.svg_utils.insert_style_rule_to_svg('extras/_images/entity_relationship_diagram.svg', svg_style_rule)

#---- Core Tables ERD

# Make datapackge with core tables only
datapackage_core_tables_only = copy.deepcopy(datapackage)
new_resources = []
for resource in datapackage_core_tables_only['resources']:
    if resource['name'] in core_tables:
        # Make sure we only have foreign keys to tables that also exist in this limited list.
        # Otherwise jts_erd will crash as it can't find the other half of a foreign key
        resource['schema']['foreignKeys'] = \
            [i for i in resource['schema'].get('foreignKeys',[]) if i['reference']['resource'] in core_tables]
        new_resources.append(resource)
datapackage_core_tables_only['resources'] = new_resources

# Write ERD
jts_erd.save_svg(
    datapackage_core_tables_only,
    'extras/_images/entity_relationship_diagram_core_tables.svg',
    display_columns=True,
    display_indexes=True,
    display_tooltips=False,
    fontname="Lato",
    html_color_header='#77DD77',
    html_color_default='#DDDDDD',
    html_color_highlight='#DDDDDD',
    default_namespace_name='human_services_data',
    rankdir='RL',
)
openreferral.svg_utils.insert_style_rule_to_svg('extras/_images/entity_relationship_diagram_core_tables.svg', svg_style_rule)

def setup(app):
    import glob
    global html_static_path
    for file in glob.glob("../api-specification/_data/api-commons/*.yaml"):
        html_static_path = html_static_path + [file]

